namespace Terrasoft.Configuration
{
	using System;
	using System.IO;
	using Aspose.Words;
	using Terrasoft.Common;

	public class ITBSAsposePDFHelper
	{

		private static object sync = new Object();
		private static bool needLicensed = true;
		private static byte[] licenseBuffer = new byte[] { 0x3c, 0x3f, 0x78, 0x6d, 0x6c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x31, 0x2e, 0x30, 0x22, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x3f, 0x3e, 0x3c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x3e, 0x3c, 0x44, 0x61, 0x74, 0x61, 0x3e, 0x3c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x54, 0x6f, 0x3e, 0x54, 0x53, 0x20, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x2f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x54, 0x6f, 0x3e, 0x3c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x4f, 0x45, 0x4d, 0x3c, 0x2f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3e, 0x3c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x3e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x3c, 0x2f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x3e, 0x3c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x3e, 0x31, 0x33, 0x31, 0x30, 0x32, 0x35, 0x30, 0x38, 0x31, 0x38, 0x35, 0x35, 0x3c, 0x2f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x3e, 0x3c, 0x4f, 0x45, 0x4d, 0x3e, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x3c, 0x2f, 0x4f, 0x45, 0x4d, 0x3e, 0x3c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3e, 0x3c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x3e, 0x41, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x3c, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x3e, 0x3c, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3e, 0x3c, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x3c, 0x2f, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3e, 0x3c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3e, 0x62, 0x37, 0x35, 0x34, 0x63, 0x31, 0x32, 0x64, 0x2d, 0x39, 0x31, 0x35, 0x33, 0x2d, 0x34, 0x65, 0x31, 0x61, 0x2d, 0x61, 0x32, 0x31, 0x38, 0x2d, 0x61, 0x61, 0x39, 0x34, 0x34, 0x37, 0x61, 0x31, 0x33, 0x61, 0x61, 0x39, 0x3c, 0x2f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3e, 0x3c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x3e, 0x32, 0x30, 0x31, 0x34, 0x31, 0x30, 0x32, 0x35, 0x3c, 0x2f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x3e, 0x3c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3e, 0x32, 0x2e, 0x32, 0x3c, 0x2f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3e, 0x3c, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x3e, 0x3c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3e, 0x51, 0x78, 0x6f, 0x62, 0x68, 0x51, 0x59, 0x32, 0x36, 0x52, 0x4f, 0x4c, 0x4a, 0x6e, 0x46, 0x43, 0x38, 0x48, 0x37, 0x48, 0x61, 0x43, 0x74, 0x2f, 0x41, 0x45, 0x34, 0x72, 0x76, 0x6d, 0x52, 0x74, 0x4a, 0x69, 0x4e, 0x4c, 0x59, 0x4d, 0x32, 0x67, 0x64, 0x47, 0x6f, 0x6c, 0x79, 0x78, 0x6f, 0x41, 0x2f, 0x36, 0x48, 0x46, 0x63, 0x68, 0x62, 0x78, 0x32, 0x52, 0x6c, 0x67, 0x56, 0x31, 0x76, 0x6d, 0x6b, 0x37, 0x63, 0x43, 0x6c, 0x32, 0x47, 0x58, 0x51, 0x37, 0x71, 0x76, 0x2f, 0x62, 0x38, 0x4a, 0x6d, 0x78, 0x4f, 0x2f, 0x39, 0x67, 0x6c, 0x77, 0x32, 0x67, 0x51, 0x4a, 0x63, 0x46, 0x4e, 0x75, 0x2b, 0x61, 0x68, 0x54, 0x4c, 0x5a, 0x6e, 0x59, 0x33, 0x59, 0x71, 0x68, 0x73, 0x52, 0x51, 0x50, 0x53, 0x67, 0x6e, 0x68, 0x41, 0x70, 0x4b, 0x39, 0x70, 0x74, 0x52, 0x51, 0x51, 0x77, 0x54, 0x79, 0x4c, 0x47, 0x56, 0x2b, 0x41, 0x51, 0x7a, 0x79, 0x79, 0x65, 0x35, 0x4c, 0x75, 0x46, 0x4f, 0x4f, 0x44, 0x75, 0x56, 0x73, 0x57, 0x52, 0x4a, 0x2f, 0x50, 0x50, 0x4d, 0x64, 0x4a, 0x34, 0x72, 0x34, 0x6e, 0x62, 0x2f, 0x6d, 0x74, 0x38, 0x75, 0x59, 0x54, 0x53, 0x67, 0x3d, 0x3c, 0x2f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3e, 0x3c, 0x2f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x3e };
		private static void License()
		{
			if (needLicensed)
			{
				lock (sync)
				{
					if (needLicensed)
					{
						MemoryStream licenseStream = new MemoryStream(licenseBuffer);
						Aspose.Words.License license = new Aspose.Words.License();
						license.SetLicense(licenseStream);
						needLicensed = false;
					}
				}
			}
		}

		public static byte[] Convert(byte[] data)
		{
			License();
			var input = new MemoryStream(data);
			input.Position = 0;
			MemoryStream output = new MemoryStream();
			Aspose.Words.Document doc = new Aspose.Words.Document(input);
			doc.Save(output, SaveFormat.Pdf);
			output.Position = 0;
			return output.ReadAllBytes();
		}

	}
}